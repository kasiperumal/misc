# Power Automate Weekly Alert Tracking Report Flow

## Overview
This guide creates a Power Automate flow that generates a weekly HTML report from the `trc_alerttracking` Dataverse table and emails it every Friday at 6 PM.

## Step 1: Create a New Scheduled Flow

1. Go to **Power Automate** (flow.microsoft.com)
2. Click **+ Create** â†’ **Scheduled cloud flow**
3. **Flow name**: "Weekly Alert Tracking Report"
4. **Starting**: Select current date
5. **Repeat every**: 1 Week
6. **On these days**: Friday
7. **At these hours**: 18 (6 PM)
8. **At these minutes**: 0
9. Click **Create**

## Step 2: Initialize Variables

Add the following **Initialize variable** actions:

### Variable 1: Week Start Date
- **Name**: `WeekStartDate`
- **Type**: String
- **Value**: `formatDateTime(addDays(utcNow(), -6), 'yyyy-MM-dd')`

### Variable 2: Week End Date
- **Name**: `WeekEndDate`
- **Type**: String
- **Value**: `formatDateTime(utcNow(), 'yyyy-MM-dd')`

### Variable 3: HTML Report Content
- **Name**: `HTMLReport`
- **Type**: String
- **Value**: Leave empty

## Step 3: Retrieve Alert Data from Dataverse

Add **List rows** action:
- **Table name**: Alert Tracking (trc_alerttracking)
- **Filter rows**: 
  ```
  trc_CreatedTime ge @{variables('WeekStartDate')}T00:00:00Z and trc_CreatedTime le @{variables('WeekEndDate')}T23:59:59Z
  ```
- **Select columns**: 
  ```
  trc_AlertId,trc_AcknowledgedBy,trc_AcknowledgedTime,trc_CreatedTime,trc_DayOfWeek,trc_EscalatedTime,trc_IsEscalated,IsL2Escalated,trc_Status,trc_TimeToAcknowledge,trc_TimeToEscalate
  ```

## Step 4: Calculate Summary Statistics

Add **Compose** actions for each metric:

### Total Alerts
- **Name**: Total Alerts This Week
- **Inputs**: `length(outputs('List_rows')?['body/value'])`

## Alternative 1: Variables with Conditions (Most Reliable)

**Step 4a: Initialize Counter Variables**
Add these **Initialize variable** actions:
- **Variable Name**: `PendingCount` | **Type**: Integer | **Value**: 0
- **Variable Name**: `AcknowledgedCount` | **Type**: Integer | **Value**: 0  
- **Variable Name**: `L1EscalatedCount` | **Type**: Integer | **Value**: 0
- **Variable Name**: `L2EscalatedCount` | **Type**: Integer | **Value**: 0

**Step 4b: Count Using Apply to Each with Conditions**
Add **Apply to each** action:
- **Select an output**: `body('List_rows')?['value']`

Inside the loop, add **Condition** actions:

**Condition 1**: Check if Pending
- **Left**: `items('Apply_to_each')?['trc_Status']`
- **Operator**: is equal to
- **Right**: `Pending`
- **If yes**: **Increment variable** `PendingCount` by 1

**Condition 2**: Check if Acknowledged  
- **Left**: `items('Apply_to_each')?['trc_Status']`
- **Operator**: is equal to
- **Right**: `Acknowledged`
- **If yes**: **Increment variable** `AcknowledgedCount` by 1

**Condition 3**: Check if L1Escalated
- **Left**: `items('Apply_to_each')?['trc_Status']`
- **Operator**: is equal to  
- **Right**: `L1Escalated`
- **If yes**: **Increment variable** `L1EscalatedCount` by 1

**Condition 4**: Check if L2Escalated
- **Left**: `items('Apply_to_each')?['trc_Status']`
- **Operator**: is equal to
- **Right**: `L2Escalated`  
- **If yes**: **Increment variable** `L2EscalatedCount` by 1

## Alternative 2: Separate Dataverse Queries

Instead of one query, use multiple **List rows** actions with filters:

**Query 1 - Pending Alerts:**
- **Table name**: Alert Tracking (trc_alerttracking)
- **Filter rows**: 
  ```
  trc_CreatedTime ge @{variables('WeekStartDate')}T00:00:00Z and trc_CreatedTime le @{variables('WeekEndDate')}T23:59:59Z and trc_Status eq 'Pending'
  ```
- **Select columns**: `trc_AlertId`
- **Top count**: 5000

**Query 2 - Acknowledged Alerts:**
- **Filter rows**: 
  ```
  trc_CreatedTime ge @{variables('WeekStartDate')}T00:00:00Z and trc_CreatedTime le @{variables('WeekEndDate')}T23:59:59Z and trc_Status eq 'Acknowledged'
  ```

**Query 3 - L1 Escalated:**
- **Filter rows**: 
  ```
  trc_CreatedTime ge @{variables('WeekStartDate')}T00:00:00Z and trc_CreatedTime le @{variables('WeekEndDate')}T23:59:59Z and trc_Status eq 'L1Escalated'
  ```

**Query 4 - L2 Escalated:**
- **Filter rows**: 
  ```
  trc_CreatedTime ge @{variables('WeekStartDate')}T00:00:00Z and trc_CreatedTime le @{variables('WeekEndDate')}T23:59:59Z and trc_Status eq 'L2Escalated'
  ```

Then use **Compose** actions:
- **Pending Count**: `length(body('List_rows_Pending')?['value'])`
- **Acknowledged Count**: `length(body('List_rows_Acknowledged')?['value'])`
- **L1 Count**: `length(body('List_rows_L1')?['value'])`
- **L2 Count**: `length(body('List_rows_L2')?['value'])`

## Alternative 3: Using Select and Length

**Step 1**: Add **Select** action after List rows
- **From**: `body('List_rows')?['value']`  
- **Map**: Choose "Switch to input entire array"
- **Expression**: `item()?['trc_Status']`

**Step 2**: Use simple expressions on the selected array
- **Pending Count**: 
  ```
  sub(length(body('Select')), length(filter(body('Select'), not(equals(item(), 'Pending')))))
  ```

## Alternative 4: Power Apps Expression (Advanced)

Create a **Compose** action with this expression:
```
json(concat(
  '{"pending":', 
  string(length(filter(body('List_rows')?['value'], equals(string(item()['trc_Status']), 'Pending')))),
  ',"acknowledged":',
  string(length(filter(body('List_rows')?['value'], equals(string(item()['trc_Status']), 'Acknowledged')))),
  ',"l1escalated":',
  string(length(filter(body('List_rows')?['value'], equals(string(item()['trc_Status']), 'L1Escalated')))),
  ',"l2escalated":',
  string(length(filter(body('List_rows')?['value'], equals(string(item()['trc_Status']), 'L2Escalated')))),
  '}'
))
```

Then reference: `outputs('Compose_Counts')['pending']`

## Alternative 5: Using Child Flow (Enterprise Solution)

Create a separate **child flow** that:
1. Takes an array and status value as input
2. Returns count using server-side processing
3. Call it multiple times from parent flow

## Step 5: Build HTML Report Structure

Add **Set variable** action for `HTMLReport`:

```html
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background-color: #0078d4; color: white; padding: 20px; text-align: center; }
        .summary { background-color: #f5f5f5; padding: 15px; margin: 20px 0; border-radius: 5px; }
        .metrics { display: flex; justify-content: space-around; margin: 20px 0; }
        .metric-box { background-color: white; border: 1px solid #ddd; padding: 15px; text-align: center; border-radius: 5px; min-width: 120px; }
        .metric-number { font-size: 24px; font-weight: bold; color: #0078d4; }
        .metric-label { font-size: 12px; color: #666; margin-top: 5px; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th { background-color: #0078d4; color: white; padding: 12px; text-align: left; }
        td { padding: 10px; border-bottom: 1px solid #ddd; }
        tr:nth-child(even) { background-color: #f9f9f9; }
        .status-pending { background-color: #fff3cd; color: #856404; padding: 4px 8px; border-radius: 3px; }
        .status-acknowledged { background-color: #d4edda; color: #155724; padding: 4px 8px; border-radius: 3px; }
        .status-l1escalated { background-color: #f8d7da; color: #721c24; padding: 4px 8px; border-radius: 3px; }
        .status-l2escalated { background-color: #d1ecf1; color: #0c5460; padding: 4px 8px; border-radius: 3px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>Weekly Alert Tracking Report</h1>
        <p>Week of @{variables('WeekStartDate')} to @{variables('WeekEndDate')}</p>
    </div>
    
    <div class="summary">
        <h2>Executive Summary</h2>
        <div class="metrics">
            <div class="metric-box">
                <div class="metric-number">@{outputs('Total_Alerts_This_Week')}</div>
                <div class="metric-label">Total Alerts</div>
            </div>
            <div class="metric-box">
                <div class="metric-number">@{variables('PendingCount')}</div>
                <div class="metric-label">Pending</div>
            </div>
            <div class="metric-box">
                <div class="metric-number">@{variables('AcknowledgedCount')}</div>
                <div class="metric-label">Acknowledged</div>
            </div>
            <div class="metric-box">
                <div class="metric-number">@{variables('L1EscalatedCount')}</div>
                <div class="metric-label">L1 Escalated</div>
            </div>
            <div class="metric-box">
                <div class="metric-number">@{variables('L2EscalatedCount')}</div>
                <div class="metric-label">L2 Escalated</div>
            </div>
        </div>
    </div>
    
    <h2>Detailed Alert Information</h2>
    <table>
        <thead>
            <tr>
                <th>Alert ID</th>
                <th>Created Time</th>
                <th>Day of Week</th>
                <th>Status</th>
                <th>Acknowledged By</th>
                <th>Time to Acknowledge</th>
                <th>Is Escalated</th>
            </tr>
        </thead>
        <tbody>
```

## Step 6: Generate Table Rows

Add **Apply to each** action:
- **Select an output**: `outputs('List_rows')?['body/value']`

Inside the loop, add **Append to string variable**:
- **Name**: HTMLReport
- **Value**:
```html
<tr>
    <td>@{items('Apply_to_each')['trc_AlertId']}</td>
    <td>@{formatDateTime(items('Apply_to_each')['trc_CreatedTime'], 'MM/dd/yyyy HH:mm')}</td>
    <td>@{items('Apply_to_each')['trc_DayOfWeek']}</td>
    <td><span class="status-@{toLower(items('Apply_to_each')['trc_Status'])}">@{items('Apply_to_each')['trc_Status']}</span></td>
    <td>@{items('Apply_to_each')['trc_AcknowledgedBy']}</td>
    <td>@{items('Apply_to_each')['trc_TimeToAcknowledge']}</td>
    <td>@{if(equals(items('Apply_to_each')['trc_IsEscalated'], true), 'Yes', 'No')}</td>
</tr>
```

## Step 7: Complete HTML Structure

After the **Apply to each** loop, add another **Append to string variable**:
- **Name**: HTMLReport
- **Value**:
```html
        </tbody>
    </table>
    
    <div class="summary">
        <h3>Key Insights</h3>
        <ul>
            <li>Alert response time performance this week</li>
            <li>Escalation trends and patterns</li>
            <li>Team acknowledgment efficiency</li>
        </ul>
    </div>
    
    <p style="font-size: 12px; color: #666; margin-top: 30px;">
        This report was automatically generated on @{formatDateTime(utcNow(), 'MM/dd/yyyy HH:mm')} UTC
    </p>
</body>
</html>
```

## Step 8: Send Email

Add **Send an email (V2)** action:
- **To**: Enter manager and leadership email addresses
- **Subject**: `Weekly Alert Tracking Report - Week of @{variables('WeekStartDate')}`
- **Body**: `@{variables('HTMLReport')}`
- **Is HTML**: Yes

## Step 9: Error Handling (Optional)

Add **Configure run after** settings:
1. Click the three dots on the email action
2. Select **Configure run after**
3. Check **is successful**, **is skipped**, **has failed**, **has timed out**

Add a **Condition** to check if the flow failed and send a notification email to administrators.

## Step 10: Test and Deploy

1. **Save** the flow
2. Click **Test** â†’ **Manually**
3. **Run flow** to test with current data
4. Review the generated email
5. Make adjustments to formatting or content as needed
6. **Turn on** the flow for automatic weekly execution

## Additional Enhancements

### Add Charts (Optional)
Consider adding a **HTTP** action to call Power BI REST API or Chart.js to generate visual charts.

### Performance Optimization
- Add **Top count** limitation in List rows if dealing with large datasets
- Consider using **OData** queries for better filtering

### Monitoring
- Add **Compose** actions to log execution details
- Set up **Flow checker** to monitor flow health

## Troubleshooting Tips

1. **Date Filtering Issues**: Ensure date formats match Dataverse expectations
2. **HTML Rendering**: Test HTML in a browser before deployment
3. **Email Delivery**: Check spam folders and email client HTML support
4. **Performance**: Monitor flow execution time and optimize if needed
5. **Permissions**: Ensure service account has read access to Dataverse table

## Security Considerations

- Use **Service Principal** for production environments
- Implement **Data Loss Prevention** policies
- Consider **sensitivity labels** for email content
- Review **sharing permissions** on the flow
