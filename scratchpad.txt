import pandas as pd
import numpy as np
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.tsa.seasonal import seasonal_decompose
from scipy import stats
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

def check_stationarity(data, significance=0.05):
    """Perform the Augmented Dickey-Fuller test for stationarity."""
    result = adfuller(data)
    p_value = result[1]
    return p_value < significance  # Stationary if p-value is less than significance level

def check_seasonality(data, period):
    """Decompose the time series to check for seasonality."""
    decomposition = seasonal_decompose(data, model='additive', period=period)
    seasonal_component = decomposition.seasonal
    if np.std(seasonal_component) > 0.1 * np.std(data):
        return True  # Seasonal if the seasonal component has significant variation
    return False

def check_linearity(data):
    """Check if the relationship is linear using regression analysis."""
    x = np.arange(len(data)).reshape(-1, 1)
    y = data.values
    model = LinearRegression().fit(x, y)
    r_squared = model.score(x, y)
    return r_squared > 0.8  # Linear if R^2 is high

def check_complex_non_linear_patterns(data):
    """Check for non-linear patterns using autocorrelation analysis."""
    autocorr = acf(data, fft=False)
    pacorr = pacf(data)
    # Non-linear if autocorrelations are irregular or have complex lags
    if any(abs(autocorr[1:]) > 0.3) or any(abs(pacorr[1:]) > 0.3):
        return True
    return False

def recommend_model(data, time_column, count_column):
    data[time_column] = pd.to_datetime(data[time_column])
    data = data.set_index(time_column)
    count_data = data[count_column]

    # Step 1: Check for seasonality with a period of 24 hours for daily cycles
    seasonality = check_seasonality(count_data, period=24)

    # Step 2: Check for stationarity
    stationarity = check_stationarity(count_data)

    # Step 3: Check for linearity
    linearity = check_linearity(count_data)

    # Step 4: Check for complex non-linear patterns
    complex_non_linear = check_complex_non_linear_patterns(count_data)

    # Decision tree logic based on characteristics
    if seasonality:
        if stationarity:
            if linearity:
                return "ARIMA or ETS"
            else:
                return "SARIMA or Seasonal Decomposition"
        else:
            return "Prophet (handles non-stationary seasonal data)"
    else:
        if complex_non_linear:
            return "LSTM or Hybrid Model (e.g., LSTM+CNN)"
        elif linearity:
            return "Linear Regression Model"
        else:
            return "Gradient Boosting (XGBoost, LightGBM)"

# Example usage
# Load your data into a DataFrame with 'time' and 'login_count' columns
df = pd.read_csv('your_data.csv')
model_recommendation = recommend_model(df, 'time', 'login_count')
print("Recommended Model:", model_recommendation)
