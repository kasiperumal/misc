I can see the issue now! The error “A binary operator with incompatible types was detected” is occurring because you’re comparing a datetime field with a string value in your filter query. Here’s how to fix it:

## The Problem

In your filter query, you’re using:

```
trc_status eq 'Pending' and trc_createdtime le '2025-06-27T05:41:45.86663762'
```

The issue is that `trc_createdtime` is a DateTime field, but you’re comparing it with a string value.

## The Solution

### Option 1: Use Dynamic Content Instead of Expression (Recommended)

1. **Clear the current filter**
1. **Build the filter using the UI**:
- Click in the Filter rows field
- Type: `trc_status eq 'Pending' and trc_createdtime le `
- Then click the lightning bolt (dynamic content)
- Select the output from “Calculate 60 Minutes Ago”
- This will automatically format it correctly

### Option 2: Fix the Expression

If you need to use an expression, modify your filter to:

```
trc_status eq 'Pending' and trc_createdtime le @{formatDateTime(outputs('Calculate_60_Minutes_Ago'), 'yyyy-MM-ddTHH:mm:ssZ')}
```

### Option 3: Use OData DateTime Format

For OData queries with Dataverse, datetime comparisons should use this format:

```
trc_status eq 'Pending' and trc_createdtime le datetime'@{formatDateTime(outputs('Calculate_60_Minutes_Ago'), 'yyyy-MM-ddTHH:mm:ss')}'
```

## Step-by-Step Fix

1. **Go to your List rows action**
1. **Clear the Filter rows field**
1. **Type the filter as follows**:
- First part: `trc_status eq 'Pending' and trc_createdtime le `
- Click the expression editor (fx button)
- Enter: `formatDateTime(outputs('Calculate_60_Minutes_Ago'), 'yyyy-MM-ddTHH:mm:ssZ')`
- Click OK

The complete filter should look like:

```
trc_status eq 'Pending' and trc_createdtime le @{formatDateTime(outputs('Calculate_60_Minutes_Ago'), 'yyyy-MM-ddTHH:mm:ssZ')}
```

## Additional Improvements

Since you want to avoid re-escalating already escalated items, update your filter to:

```
trc_status eq 'Pending' and trc_createdtime le @{formatDateTime(outputs('Calculate_60_Minutes_Ago'), 'yyyy-MM-ddTHH:mm:ssZ')} and trc_escalatedtime eq null
```

This ensures you only process items that:

- Have ‘Pending’ status
- Were created more than 60 minutes ago
- Have not been escalated yet (EscalatedTime is null)

## Alternative Approach - Using Advanced Query

If the above doesn’t work, you can use the “Fetch Xml Query” option instead:

1. In the List rows action, expand “Show advanced options”
1. Use Fetch Xml Query with this format:

```xml
<fetch>
  <entity name="trc_alerttracking">
    <attribute name="trc_alerttrackingid" />
    <attribute name="trc_alertid" />
    <attribute name="trc_alertmessage" />
    <attribute name="trc_status" />
    <attribute name="trc_createdtime" />
    <filter>
      <condition attribute="trc_status" operator="eq" value="Pending" />
      <condition attribute="trc_createdtime" operator="le" value="@{outputs('Calculate_60_Minutes_Ago')}" />
      <condition attribute="trc_escalatedtime" operator="null" />
    </filter>
  </entity>
</fetch>
```

Try Option 1 first as it’s the simplest. The key is ensuring the datetime comparison is properly formatted for OData queries in Dataverse.​​​​​​​​​​​​​​​​