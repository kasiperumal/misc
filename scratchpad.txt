import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.multioutput import MultiOutputClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Load the Excel data (Excel will pass the table to the Python script)
data = pd.DataFrame(CurrentWorkbook["IrisData"])

# Specify feature and label columns
feature_columns = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width']
target_columns = ['label_1', 'label_2', 'label_3']  # Replace with your actual label column names

# Split features and targets
X = data[feature_columns]
y = data[target_columns]

# Standardize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Multi-label classification using MultiOutputClassifier with RandomForestClassifier
model = MultiOutputClassifier(RandomForestClassifier(random_state=42))
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
report = classification_report(y_test, y_pred, target_names=target_columns, output_dict=True)

# Create a dataframe for the classification report
report_df = pd.DataFrame(report).transpose()

# Output the report back to Excel
CurrentWorkbook["ClassificationReport"] = report_df

# Visualization: Scatter plot for the species
plt.figure(figsize=(10, 6))

# Create scatter plot for each label
colors = ['red', 'blue', 'green']  # Colors for each label
markers = ['o', 's', '^']  # Markers for each label

for i, label in enumerate(target_columns):
    # Plot true positive predictions (correctly classified)
    plt.scatter(
        X_test[:, 0],  # First feature (e.g., sepal_length)
        X_test[:, 1],  # Second feature (e.g., sepal_width)
        c=[colors[i] if y_pred[j, i] == y_test.iloc[j, i] else 'gray' for j in range(len(y_test))],
        marker=markers[i],
        label=f"{label} (correct)",
        alpha=0.6,
    )

# Customize plot
plt.title("Scatter Plot of Multi-Label Classification")
plt.xlabel("Sepal Length (standardized)")
plt.ylabel("Sepal Width (standardized)")
plt.legend(title="Species Labels")
plt.grid(True)
plt.tight_layout()

# Show the plot
plt.show()