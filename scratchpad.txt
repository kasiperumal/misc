... | rex field=_raw "\"listfield2\":\s*\"(?<listfield2_value>[^\"]+)\"" max_match=0 | table listfield2_value
... | spath input=list1{} output=listfield2_value path=listfield2 | table listfield2_value
| makeresults 
| eval yourField="value1,value2,value3,value2" // Example events field values
| makemv yourField delim="," 
| mvexpand yourField 
| eval staticList="value1,value2,value3" // Your static list
| makemv staticList delim="," 
| mvexpand staticList 
| eval match=if(yourField=staticList, 1, 0) 
| where match=1 
| stats count by staticList
sed -n 's/.*\\"risk\\": \[\(.*?\)\].*/\1/p' your_file.json


Title: Leveraging Knowledge Graphs for Enhanced Log Analysis

Abstract:

In the complex landscape of IT systems, application logs are a goldmine of information that often goes underexploited due to their unstructured nature. This presentation proposes a novel approach: constructing a Knowledge Graph from application log files to illuminate the intricate interactions within applications. By transforming raw log data into a structured, relational graph, we unlock new possibilities for monitoring, troubleshooting, and optimizing system performance. We'll cover the process from log parsing and entity recognition to relationship extraction, showcasing how this graph provides a comprehensive view of system dynamics. Practical challenges such as data heterogeneity and scalability will be addressed, alongside strategies to maintain graph accuracy in dynamic environments. Through real-world examples, attendees will learn how Knowledge Graphs can revolutionize system analysis, offering insights beyond traditional log analysis methods and paving the way for future innovations in IT system management.

Title: Building GenAI Applications Using Langchain

Abstract:
In the fast-paced world of artificial intelligence, Generative AI (GenAI) stands out as a key driver of innovation within enterprises. Leveraging Langchain, a platform that simplifies the integration of AI models into business applications, organizations can unlock new levels of productivity and creativity. This presentation will explore how Langchain enables the development of GenAI applications tailored for enterprise needs, showcasing its potential to automate content generation, enhance decision-making, and streamline data analysis. We will discuss the strategic benefits of GenAI in the enterprise, such as operational efficiency and competitive advantage, while also addressing challenges like data privacy and ethical considerations. Through practical examples, attendees will gain insights into using Langchain to create impactful GenAI solutions, empowering businesses to lead in innovation. This concise overview aims to provide a foundation for understanding the transformative potential of GenAI applications in enterprises, making it an invaluable session for business leaders, developers, and AI enthusiasts

    "chart.js": "3.7.0",
    "chart.js-plugin-labels-dv": "3.0.6",
    "chartjs-plugin-datalabels": "2.0.0",
    "react-chartjs-2": "4.0.1",

buildscript {
    repositories {
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.github.rivancic:asyncapi-generator-gradle-plugin:x.y.z'
    }
}

apply plugin: 'org.rivancic.asyncapi'


asyncAPI {
    version = '2.0.0' // Specify the AsyncAPI version you are using
    sourceDir = file('src/main/resources/asyncapi') // Directory where your AsyncAPI specs are located
    outputDir = file("$buildDir/generated-sources/asyncapi") // Where to output the generated files
    generator = 'spring' // Specify the generator to use, e.g., 'spring', 'html', etc.
}

./gradlew clean asyncApiGenerate

node {
    // Node.js version to use
    version = '14.15.4'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    yarnWorkDir = file("${project.buildDir}/yarn")
    nodeModulesDir = file("${project.projectDir}")
    
    // Configure proxy settings
    nodeProxySettings = com.github.nodegradle.NodeExtension.ProxySettings.FORCE
    npmProxySettings = com.github.nodegradle.NodeExtension.ProxySettings.FORCE
    
    // Example proxy configuration (replace with your actual proxy settings)
    npmProxyUrl = 'http://localhost:3128'
    npmProxyHttpsUrl = 'http://localhost:3128'
    
    // Set environment variables if needed (optional)
    environment = [
        'HTTP_PROXY': 'http://localhost:3128',
        'HTTPS_PROXY': 'http://localhost:3128'
    ]
}

private static final String VALIDATE_TASK_NAME = "asyncApiValidate";

project.getTasks().register(VALIDATE_TASK_NAME, NpxTask.class, task -> {
    task.setGroup(ASYNCAPI_TASK_GROUP);
    task.getCommand().set(ASYNCAPI_CLI_COMMAND);
    List<String> validateArgs = new ArrayList<>();
    validateArgs.add("validate");
    validateArgs.add(getAsyncApiFile(asyncApiExtension));
    task.setArgs(validateArgs);
});

private static final String FROM_TEMPLATE_TASK_NAME = "asyncApiGenerateFromTemplate";

project.getTasks().register(FROM_TEMPLATE_TASK_NAME, NpxTask.class, task -> {
    task.setGroup(ASYNCAPI_TASK_GROUP);
    task.getCommand().set(ASYNCAPI_CLI_COMMAND);
    List<String> args = new ArrayList<>();
    args.add("generate");
    args.add("fromTemplate");
    args.add(getAsyncApiFile(asyncApiExtension)); // ASYNCAPI
    args.add(getTemplate(asyncApiExtension)); // TEMPLATE

    // Add optional flags based on the AsyncApiExtension configuration
    if (asyncApiExtension.getOutput().isPresent()) {
        args.add("-o");
        args.add(getAsyncApiOutputDirectory(asyncApiExtension));
    }
    if (asyncApiExtension.getForceWrite().getOrElse(false)) {
        args.add("--force-write");
    }
    if (asyncApiExtension.getDebug().getOrElse(false)) {
        args.add("--debug");
    }
    // Add more flags as needed

    task.setArgs(args);
    task.getOutputs().dir(getAsyncApiOutputDirectory(asyncApiExtension));
});

project.getTasks().register("installTemplate", NpmTask.class, npmTask -> {
    npmTask.setGroup(ASYNCAPI_TASK_GROUP);
    npmTask.setArgs(Arrays.asList("install", getTemplate(asyncApiExtension)));
});

project.getTasks().named(FROM_TEMPLATE_TASK_NAME).configure(task -> {
    task.dependsOn("installTemplate");
});

project.getTasks().register("installTemplate", NpmTask.class, npmTask -> {
    npmTask.setGroup(ASYNCAPI_TASK_GROUP);
    npmTask.setArgs(Arrays.asList("install", getTemplate(asyncApiExtension)));
});

project.getTasks().named(FROM_TEMPLATE_TASK_NAME).configure(task -> {
    task.dependsOn("installTemplate");
});

{
  "nodes": [
    {
      "type": "Person",
      "splunkQuery": "search index=\"people\" | fields name, age",
      "fieldMapping": {
        "name": "name",
        "age": "age"
      }
    }
  ],
  "relationships": [
    {
      "type": "KNOWS",
      "splunkQuery": "search index=\"relationships\" | fields relationship",
       "startNode": "person1",
       "endNode": "person2"
      "fieldMapping": {
            "relationship": "relationship" 
      }
    }
  ]
}
