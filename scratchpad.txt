# Stop on any error
$ErrorActionPreference = "Stop"

# Prompt for input
$mainBranch = Read-Host "Enter the main branch to merge into (e.g., develop)"
$featureBranch = Read-Host "Enter the feature branch to merge from (e.g., develop-1)"

# Prompt for GitHub token at runtime (simulating OAuth)
$githubToken = Read-Host -AsSecureString "Enter your GitHub Personal Access Token (simulating OAuth)"
$githubTokenPlain = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($githubToken))

# Extract repo name from git remote
$remoteUrl = git config --get remote.origin.url
if ($remoteUrl -match "github.com[:/](.+?)(\.git)?$") {
    $repoName = $matches[1]
} else {
    Write-Host "‚ùå Could not determine GitHub repo name from remote URL."
    exit 1
}

Write-Host "Feature branch: $featureBranch"
Write-Host "Main branch: $mainBranch"
Write-Host "GitHub repo: $repoName"

# Fetch and check out branches
git fetch origin
git checkout $mainBranch
git pull origin $mainBranch

# Merge with regular strategy (not fast-forward only)
Write-Host "Attempting regular merge of $featureBranch into $mainBranch..."
git merge $featureBranch 2>&1

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Merge successful."

    # Build the project
    Write-Host "üî® Running Gradle build..."
    & ./gradlew build

    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Build successful."

        # Push merged main branch
        git push origin $mainBranch

        # Prepare PR data
        $prTitle = "Merge $featureBranch into $mainBranch"
        $prBody = "Automated regular merge and successful Gradle build."
        $jsonPayload = @{
            title = $prTitle
            head  = $featureBranch
            base  = $mainBranch
            body  = $prBody
        } | ConvertTo-Json -Depth 3

        $apiUrl = "https://api.github.com/repos/$repoName/pulls"
        $headers = @{
            Authorization = "token $githubTokenPlain"
            Accept = "application/vnd.github.v3+json"
            "User-Agent" = "PowerShell Script"
        }

        Write-Host "üöÄ Creating pull request via GitHub API..."
        try {
            $response = Invoke-RestMethod -Uri $apiUrl -Headers $headers -Method Post -Body $jsonPayload -ContentType "application/json"

            if ($response.html_url) {
                Write-Host "‚úÖ Pull request created successfully:"
                Write-Host $response.html_url
            } else {
                Write-Host "‚ùå Pull request creation failed: unexpected response."
                exit 1
            }
        }
        catch {
            Write-Host "‚ùå Failed to create pull request: $($_.Exception.Message)"
            exit 1
        }

    } else {
        Write-Host "‚ùå Build failed after merge. Please check build output."
        exit 1
    }
} else {
    Write-Host "‚ùå Merge failed. Please resolve conflicts manually."
    exit 1
}