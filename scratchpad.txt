// Create Components
CREATE (c1:Component {id: 'c1', title: 'c1', component_id: 1, component_name: 'Authentication Server', component_type: 'Server'})
CREATE (c2:Component {id: 'c2', title: 'c2', component_id: 2, component_name: 'Database Server', component_type: 'Server'})
CREATE (c3:Component {id: 'c3', title: 'c3', component_id: 3, component_name: 'Application Server', component_type: 'Server'})

// Create Incidents
CREATE (i1:Incident {id: 'i1', title: 'i1', incident_id: 1, incident_description: 'Login Failure', created_date: date('2023-01-10'), resolved_date: date('2023-01-11'), severity: 'critical'}) CREATE (i2:Incident {id: 'i2', title: 'i2', incident_id: 2, incident_description: 'Transaction Timeout', created_date: date('2023-02-15'), resolved_date: date('2023-02-16'), severity: 'major'})
CREATE (i3:Incident {id: 'i3', title: 'i3', incident_id: 3, incident_description: 'Data Sync Error', created_date: date('2023-03-20'), resolved_date: date('2023-03-21'), severity: 'minor'})

// Create Relationships between Incidents and Components
CREATE (i1)-[:CAUSED_BY]->(c1)
CREATE (i2)-[:CAUSED_BY]->(c2)
CREATE (i3)-[:CAUSED_BY]->(c3)

// Create Risk Nodes
CREATE (r1:Risk {id: 'r1', title: 'r1', risk_id: 1, risk_description: 'Potential Login Failure'})
CREATE (r2:Risk {id: 'r2', title: 'r2', risk_id: 2, risk_description: 'Potential Transaction Timeout'})
CREATE (r3:Risk {id: 'r3', title: 'r3', risk_id: 3, risk_description: 'Potential Data Sync Error'})

// Create Mitigation Strategies
CREATE (m1:Mitigation {id: 'm1', title: 'm1', mitigation_id: 1, mitigation_description: 'Increase Authentication Server Capacity'})
CREATE (m2:Mitigation {id: 'm2', title: 'm2', mitigation_id: 2, mitigation_description: 'Optimize Database Server Performance'})
CREATE (m3:Mitigation {id: 'm3', title: 'm3', mitigation_id: 3, mitigation_description: 'Improve Application Server Data Handling'})

// Create Relationships between Risks and Mitigation Strategies
CREATE (r1)-[:MITIGATED_BY]->(m1)
CREATE (r2)-[:MITIGATED_BY]->(m2)
CREATE (r3)-[:MITIGATED_BY]->(m3)

// Link Risks to Components
CREATE (r1)-[:ASSOCIATED_WITH]->(c1)
CREATE (r2)-[:ASSOCIATED_WITH]->(c2)
CREATE (r3)-[:ASSOCIATED_WITH]->(c3)

// Create Changes
CREATE (ch1:Change {id: 'ch1', title: 'ch1', change_id: 1, change_description: 'Patch Update', implemented_date: date('2023-04-01')})
CREATE (ch2:Change {id: 'ch2', title: 'ch2', change_id: 2, change_description: 'Server Upgrade', implemented_date: date('2023-05-01')})
CREATE (ch3:Change {id: 'ch3', title: 'ch3', change_id: 3, change_description: 'Configuration Change', implemented_date: date('2023-06-01')})

// Create Impact Analysis Relationships
CREATE (ch1)-[:AFFECTS]->(c1)
CREATE (ch2)-[:AFFECTS]->(c2)
CREATE (ch3)-[:AFFECTS]->(c3)

// Historical Incidents Resolved by Changes
CREATE (i1)-[:RESOLVED_BY]->(ch1)
CREATE (i2)-[:RESOLVED_BY]->(ch2)
CREATE (i3)-[:RESOLVED_BY]->(ch3)

Usecase1 chat msg:
We are experiencing issues with transactions timing out frequently. The error message we see is "Transaction Timeout". Can you identify the impacted component and provide a possible resolution?
Hi, I am facing a problem with user logins. The system keeps throwing an error saying "Login Failure". Can you help me identify the impacted component and suggest a resolution?

Step-by-Step Breakdown
1. User Message: The user describes the issue they are facing with transaction timeouts.
2. System Processing:
    * The backend receives the message.
    * Generates an embedding for the incident description "Transaction Timeout".
    * Compares the embedding with historical incident data stored in Neo4j.
    * Identifies the most similar historical incident and the impacted component (Database Server).
    * Retrieves the resolution for the similar historical incident (Optimize Database Server Performance).
3. System Response: The system provides the impacted component and the resolution based on the historical data.



Usecase2 chat msg:
We are planning to deploy a new server upgrade. Can you identify the affected component and provide a risk assessment based on historical data?
We are planning to apply a patch update to the authentication server. Can you identify the affected component and provide a risk assessment based on historical data?


Step-by-Step Breakdown
1. User Message: The user describes the proposed change in natural language.
2. System Processing:
    * The backend receives the message.
    * Generates an embedding for the change description "We are planning to deploy a new server upgrade".
    * Compares the embedding with historical change data stored in Neo4j.
    * Identifies the most similar historical change and the affected component (Database Server).
    * Retrieves the severity of the most recent incident related to this component (Major).
    * Assesses the risk flag based on the incident severity (Medium).
3. System Response: The system provides the affected component, the severity of past incidents, and a risk flag based on the historical data.


Usecase3 chat msg:
Please provide risk details for the Authentication Server.
What are the risk details and mitigations for the Database Server?

Step-by-Step Breakdown
1. User Message: The user asks for risk details and mitigations related to the "Database Server".
2. System Processing:
    * The backend receives the message.
    * Queries the historical incidents for the component "Database Server".
    * Identifies the risk descriptions and mitigation strategies related to the component.
    * Constructs a response with the incident details, risk descriptions, and mitigation strategies.
3. System Response: The system provides the incident details, risk descriptions, and mitigation strategies based on the historical data for the "Database Server".
